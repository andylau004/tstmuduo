// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sylar.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_sylar_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_sylar_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_sylar_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_sylar_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_sylar_2eproto;
namespace sylar {
class AA;
class AADefaultTypeInternal;
extern AADefaultTypeInternal _AA_default_instance_;
class Test;
class TestDefaultTypeInternal;
extern TestDefaultTypeInternal _Test_default_instance_;
class XX;
class XXDefaultTypeInternal;
extern XXDefaultTypeInternal _XX_default_instance_;
}  // namespace sylar
PROTOBUF_NAMESPACE_OPEN
template<> ::sylar::AA* Arena::CreateMaybeMessage<::sylar::AA>(Arena*);
template<> ::sylar::Test* Arena::CreateMaybeMessage<::sylar::Test>(Arena*);
template<> ::sylar::XX* Arena::CreateMaybeMessage<::sylar::XX>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace sylar {

// ===================================================================

class AA :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sylar.AA) */ {
 public:
  AA();
  virtual ~AA();

  AA(const AA& from);
  AA(AA&& from) noexcept
    : AA() {
    *this = ::std::move(from);
  }

  inline AA& operator=(const AA& from) {
    CopyFrom(from);
    return *this;
  }
  inline AA& operator=(AA&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AA& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AA* internal_default_instance() {
    return reinterpret_cast<const AA*>(
               &_AA_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(AA& a, AA& b) {
    a.Swap(&b);
  }
  inline void Swap(AA* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AA* New() const final {
    return CreateMaybeMessage<AA>(nullptr);
  }

  AA* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AA>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AA& from);
  void MergeFrom(const AA& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AA* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sylar.AA";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_sylar_2eproto);
    return ::descriptor_table_sylar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kAgeFieldNumber = 2,
  };
  // optional string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional int32 age = 2;
  bool has_age() const;
  private:
  bool _internal_has_age() const;
  public:
  void clear_age();
  ::PROTOBUF_NAMESPACE_ID::int32 age() const;
  void set_age(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_age() const;
  void _internal_set_age(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:sylar.AA)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::int32 age_;
  friend struct ::TableStruct_sylar_2eproto;
};
// -------------------------------------------------------------------

class Test :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sylar.Test) */ {
 public:
  Test();
  virtual ~Test();

  Test(const Test& from);
  Test(Test&& from) noexcept
    : Test() {
    *this = ::std::move(from);
  }

  inline Test& operator=(const Test& from) {
    CopyFrom(from);
    return *this;
  }
  inline Test& operator=(Test&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Test& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Test* internal_default_instance() {
    return reinterpret_cast<const Test*>(
               &_Test_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Test& a, Test& b) {
    a.Swap(&b);
  }
  inline void Swap(Test* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Test* New() const final {
    return CreateMaybeMessage<Test>(nullptr);
  }

  Test* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Test>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Test& from);
  void MergeFrom(const Test& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Test* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sylar.Test";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_sylar_2eproto);
    return ::descriptor_table_sylar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPhonesFieldNumber = 3,
    kAaFieldNumber = 4,
    kNameFieldNumber = 1,
    kAgeFieldNumber = 2,
  };
  // repeated string phones = 3;
  int phones_size() const;
  private:
  int _internal_phones_size() const;
  public:
  void clear_phones();
  const std::string& phones(int index) const;
  std::string* mutable_phones(int index);
  void set_phones(int index, const std::string& value);
  void set_phones(int index, std::string&& value);
  void set_phones(int index, const char* value);
  void set_phones(int index, const char* value, size_t size);
  std::string* add_phones();
  void add_phones(const std::string& value);
  void add_phones(std::string&& value);
  void add_phones(const char* value);
  void add_phones(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& phones() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_phones();
  private:
  const std::string& _internal_phones(int index) const;
  std::string* _internal_add_phones();
  public:

  // repeated .sylar.AA aa = 4;
  int aa_size() const;
  private:
  int _internal_aa_size() const;
  public:
  void clear_aa();
  ::sylar::AA* mutable_aa(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sylar::AA >*
      mutable_aa();
  private:
  const ::sylar::AA& _internal_aa(int index) const;
  ::sylar::AA* _internal_add_aa();
  public:
  const ::sylar::AA& aa(int index) const;
  ::sylar::AA* add_aa();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sylar::AA >&
      aa() const;

  // optional string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional int32 age = 2;
  bool has_age() const;
  private:
  bool _internal_has_age() const;
  public:
  void clear_age();
  ::PROTOBUF_NAMESPACE_ID::int32 age() const;
  void set_age(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_age() const;
  void _internal_set_age(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:sylar.Test)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> phones_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sylar::AA > aa_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::int32 age_;
  friend struct ::TableStruct_sylar_2eproto;
};
// -------------------------------------------------------------------

class XX :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sylar.XX) */ {
 public:
  XX();
  virtual ~XX();

  XX(const XX& from);
  XX(XX&& from) noexcept
    : XX() {
    *this = ::std::move(from);
  }

  inline XX& operator=(const XX& from) {
    CopyFrom(from);
    return *this;
  }
  inline XX& operator=(XX&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const XX& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const XX* internal_default_instance() {
    return reinterpret_cast<const XX*>(
               &_XX_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(XX& a, XX& b) {
    a.Swap(&b);
  }
  inline void Swap(XX* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline XX* New() const final {
    return CreateMaybeMessage<XX>(nullptr);
  }

  XX* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<XX>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const XX& from);
  void MergeFrom(const XX& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(XX* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sylar.XX";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_sylar_2eproto);
    return ::descriptor_table_sylar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAaFieldNumber = 4,
    kNameFieldNumber = 1,
  };
  // repeated .sylar.AA aa = 4;
  int aa_size() const;
  private:
  int _internal_aa_size() const;
  public:
  void clear_aa();
  ::sylar::AA* mutable_aa(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sylar::AA >*
      mutable_aa();
  private:
  const ::sylar::AA& _internal_aa(int index) const;
  ::sylar::AA* _internal_add_aa();
  public:
  const ::sylar::AA& aa(int index) const;
  ::sylar::AA* add_aa();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sylar::AA >&
      aa() const;

  // optional string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:sylar.XX)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sylar::AA > aa_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  friend struct ::TableStruct_sylar_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// AA

// optional string name = 1;
inline bool AA::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool AA::has_name() const {
  return _internal_has_name();
}
inline void AA::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& AA::name() const {
  // @@protoc_insertion_point(field_get:sylar.AA.name)
  return _internal_name();
}
inline void AA::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:sylar.AA.name)
}
inline std::string* AA::mutable_name() {
  // @@protoc_insertion_point(field_mutable:sylar.AA.name)
  return _internal_mutable_name();
}
inline const std::string& AA::_internal_name() const {
  return name_.GetNoArena();
}
inline void AA::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void AA::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sylar.AA.name)
}
inline void AA::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sylar.AA.name)
}
inline void AA::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sylar.AA.name)
}
inline std::string* AA::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AA::release_name() {
  // @@protoc_insertion_point(field_release:sylar.AA.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AA::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:sylar.AA.name)
}

// optional int32 age = 2;
inline bool AA::_internal_has_age() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool AA::has_age() const {
  return _internal_has_age();
}
inline void AA::clear_age() {
  age_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AA::_internal_age() const {
  return age_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AA::age() const {
  // @@protoc_insertion_point(field_get:sylar.AA.age)
  return _internal_age();
}
inline void AA::_internal_set_age(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  age_ = value;
}
inline void AA::set_age(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_age(value);
  // @@protoc_insertion_point(field_set:sylar.AA.age)
}

// -------------------------------------------------------------------

// Test

// optional string name = 1;
inline bool Test::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Test::has_name() const {
  return _internal_has_name();
}
inline void Test::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Test::name() const {
  // @@protoc_insertion_point(field_get:sylar.Test.name)
  return _internal_name();
}
inline void Test::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:sylar.Test.name)
}
inline std::string* Test::mutable_name() {
  // @@protoc_insertion_point(field_mutable:sylar.Test.name)
  return _internal_mutable_name();
}
inline const std::string& Test::_internal_name() const {
  return name_.GetNoArena();
}
inline void Test::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Test::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sylar.Test.name)
}
inline void Test::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sylar.Test.name)
}
inline void Test::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sylar.Test.name)
}
inline std::string* Test::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Test::release_name() {
  // @@protoc_insertion_point(field_release:sylar.Test.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Test::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:sylar.Test.name)
}

// optional int32 age = 2;
inline bool Test::_internal_has_age() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Test::has_age() const {
  return _internal_has_age();
}
inline void Test::clear_age() {
  age_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Test::_internal_age() const {
  return age_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Test::age() const {
  // @@protoc_insertion_point(field_get:sylar.Test.age)
  return _internal_age();
}
inline void Test::_internal_set_age(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  age_ = value;
}
inline void Test::set_age(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_age(value);
  // @@protoc_insertion_point(field_set:sylar.Test.age)
}

// repeated string phones = 3;
inline int Test::_internal_phones_size() const {
  return phones_.size();
}
inline int Test::phones_size() const {
  return _internal_phones_size();
}
inline void Test::clear_phones() {
  phones_.Clear();
}
inline std::string* Test::add_phones() {
  // @@protoc_insertion_point(field_add_mutable:sylar.Test.phones)
  return _internal_add_phones();
}
inline const std::string& Test::_internal_phones(int index) const {
  return phones_.Get(index);
}
inline const std::string& Test::phones(int index) const {
  // @@protoc_insertion_point(field_get:sylar.Test.phones)
  return _internal_phones(index);
}
inline std::string* Test::mutable_phones(int index) {
  // @@protoc_insertion_point(field_mutable:sylar.Test.phones)
  return phones_.Mutable(index);
}
inline void Test::set_phones(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:sylar.Test.phones)
  phones_.Mutable(index)->assign(value);
}
inline void Test::set_phones(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:sylar.Test.phones)
  phones_.Mutable(index)->assign(std::move(value));
}
inline void Test::set_phones(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  phones_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:sylar.Test.phones)
}
inline void Test::set_phones(int index, const char* value, size_t size) {
  phones_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:sylar.Test.phones)
}
inline std::string* Test::_internal_add_phones() {
  return phones_.Add();
}
inline void Test::add_phones(const std::string& value) {
  phones_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:sylar.Test.phones)
}
inline void Test::add_phones(std::string&& value) {
  phones_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:sylar.Test.phones)
}
inline void Test::add_phones(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  phones_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:sylar.Test.phones)
}
inline void Test::add_phones(const char* value, size_t size) {
  phones_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:sylar.Test.phones)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Test::phones() const {
  // @@protoc_insertion_point(field_list:sylar.Test.phones)
  return phones_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Test::mutable_phones() {
  // @@protoc_insertion_point(field_mutable_list:sylar.Test.phones)
  return &phones_;
}

// repeated .sylar.AA aa = 4;
inline int Test::_internal_aa_size() const {
  return aa_.size();
}
inline int Test::aa_size() const {
  return _internal_aa_size();
}
inline void Test::clear_aa() {
  aa_.Clear();
}
inline ::sylar::AA* Test::mutable_aa(int index) {
  // @@protoc_insertion_point(field_mutable:sylar.Test.aa)
  return aa_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sylar::AA >*
Test::mutable_aa() {
  // @@protoc_insertion_point(field_mutable_list:sylar.Test.aa)
  return &aa_;
}
inline const ::sylar::AA& Test::_internal_aa(int index) const {
  return aa_.Get(index);
}
inline const ::sylar::AA& Test::aa(int index) const {
  // @@protoc_insertion_point(field_get:sylar.Test.aa)
  return _internal_aa(index);
}
inline ::sylar::AA* Test::_internal_add_aa() {
  return aa_.Add();
}
inline ::sylar::AA* Test::add_aa() {
  // @@protoc_insertion_point(field_add:sylar.Test.aa)
  return _internal_add_aa();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sylar::AA >&
Test::aa() const {
  // @@protoc_insertion_point(field_list:sylar.Test.aa)
  return aa_;
}

// -------------------------------------------------------------------

// XX

// optional string name = 1;
inline bool XX::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool XX::has_name() const {
  return _internal_has_name();
}
inline void XX::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& XX::name() const {
  // @@protoc_insertion_point(field_get:sylar.XX.name)
  return _internal_name();
}
inline void XX::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:sylar.XX.name)
}
inline std::string* XX::mutable_name() {
  // @@protoc_insertion_point(field_mutable:sylar.XX.name)
  return _internal_mutable_name();
}
inline const std::string& XX::_internal_name() const {
  return name_.GetNoArena();
}
inline void XX::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void XX::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sylar.XX.name)
}
inline void XX::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sylar.XX.name)
}
inline void XX::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sylar.XX.name)
}
inline std::string* XX::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* XX::release_name() {
  // @@protoc_insertion_point(field_release:sylar.XX.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void XX::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:sylar.XX.name)
}

// repeated .sylar.AA aa = 4;
inline int XX::_internal_aa_size() const {
  return aa_.size();
}
inline int XX::aa_size() const {
  return _internal_aa_size();
}
inline void XX::clear_aa() {
  aa_.Clear();
}
inline ::sylar::AA* XX::mutable_aa(int index) {
  // @@protoc_insertion_point(field_mutable:sylar.XX.aa)
  return aa_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sylar::AA >*
XX::mutable_aa() {
  // @@protoc_insertion_point(field_mutable_list:sylar.XX.aa)
  return &aa_;
}
inline const ::sylar::AA& XX::_internal_aa(int index) const {
  return aa_.Get(index);
}
inline const ::sylar::AA& XX::aa(int index) const {
  // @@protoc_insertion_point(field_get:sylar.XX.aa)
  return _internal_aa(index);
}
inline ::sylar::AA* XX::_internal_add_aa() {
  return aa_.Add();
}
inline ::sylar::AA* XX::add_aa() {
  // @@protoc_insertion_point(field_add:sylar.XX.aa)
  return _internal_add_aa();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sylar::AA >&
XX::aa() const {
  // @@protoc_insertion_point(field_list:sylar.XX.aa)
  return aa_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace sylar

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_sylar_2eproto
