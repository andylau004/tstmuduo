// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: addressbook.proto

#ifndef PROTOBUF_addressbook_2eproto__INCLUDED
#define PROTOBUF_addressbook_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace ContactInfo {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_addressbook_2eproto();
void protobuf_AssignDesc_addressbook_2eproto();
void protobuf_ShutdownFile_addressbook_2eproto();

class Person;
class Person_PhoneNumber;
class AddressBook;

enum Person_PhoneType {
  Person_PhoneType_MOBILE = 0,
  Person_PhoneType_HOME = 1,
  Person_PhoneType_WORK = 2
};
bool Person_PhoneType_IsValid(int value);
const Person_PhoneType Person_PhoneType_PhoneType_MIN = Person_PhoneType_MOBILE;
const Person_PhoneType Person_PhoneType_PhoneType_MAX = Person_PhoneType_WORK;
const int Person_PhoneType_PhoneType_ARRAYSIZE = Person_PhoneType_PhoneType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Person_PhoneType_descriptor();
inline const ::std::string& Person_PhoneType_Name(Person_PhoneType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Person_PhoneType_descriptor(), value);
}
inline bool Person_PhoneType_Parse(
    const ::std::string& name, Person_PhoneType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Person_PhoneType>(
    Person_PhoneType_descriptor(), name, value);
}
// ===================================================================

class Person_PhoneNumber : public ::google::protobuf::Message {
 public:
  Person_PhoneNumber();
  virtual ~Person_PhoneNumber();

  Person_PhoneNumber(const Person_PhoneNumber& from);

  inline Person_PhoneNumber& operator=(const Person_PhoneNumber& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Person_PhoneNumber& default_instance();

  void Swap(Person_PhoneNumber* other);

  // implements Message ----------------------------------------------

  Person_PhoneNumber* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Person_PhoneNumber& from);
  void MergeFrom(const Person_PhoneNumber& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string number = 4;
  inline bool has_number() const;
  inline void clear_number();
  static const int kNumberFieldNumber = 4;
  inline const ::std::string& number() const;
  inline void set_number(const ::std::string& value);
  inline void set_number(const char* value);
  inline void set_number(const char* value, size_t size);
  inline ::std::string* mutable_number();
  inline ::std::string* release_number();
  inline void set_allocated_number(::std::string* number);

  // optional .ContactInfo.Person.PhoneType type = 2 [default = HOME];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::ContactInfo::Person_PhoneType type() const;
  inline void set_type(::ContactInfo::Person_PhoneType value);

  // @@protoc_insertion_point(class_scope:ContactInfo.Person.PhoneNumber)
 private:
  inline void set_has_number();
  inline void clear_has_number();
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* number_;
  int type_;
  friend void  protobuf_AddDesc_addressbook_2eproto();
  friend void protobuf_AssignDesc_addressbook_2eproto();
  friend void protobuf_ShutdownFile_addressbook_2eproto();

  void InitAsDefaultInstance();
  static Person_PhoneNumber* default_instance_;
};
// -------------------------------------------------------------------

class Person : public ::google::protobuf::Message {
 public:
  Person();
  virtual ~Person();

  Person(const Person& from);

  inline Person& operator=(const Person& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Person& default_instance();

  void Swap(Person* other);

  // implements Message ----------------------------------------------

  Person* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Person& from);
  void MergeFrom(const Person& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Person_PhoneNumber PhoneNumber;

  typedef Person_PhoneType PhoneType;
  static const PhoneType MOBILE = Person_PhoneType_MOBILE;
  static const PhoneType HOME = Person_PhoneType_HOME;
  static const PhoneType WORK = Person_PhoneType_WORK;
  static inline bool PhoneType_IsValid(int value) {
    return Person_PhoneType_IsValid(value);
  }
  static const PhoneType PhoneType_MIN =
    Person_PhoneType_PhoneType_MIN;
  static const PhoneType PhoneType_MAX =
    Person_PhoneType_PhoneType_MAX;
  static const int PhoneType_ARRAYSIZE =
    Person_PhoneType_PhoneType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  PhoneType_descriptor() {
    return Person_PhoneType_descriptor();
  }
  static inline const ::std::string& PhoneType_Name(PhoneType value) {
    return Person_PhoneType_Name(value);
  }
  static inline bool PhoneType_Parse(const ::std::string& name,
      PhoneType* value) {
    return Person_PhoneType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required string curName = 1;
  inline bool has_curname() const;
  inline void clear_curname();
  static const int kCurNameFieldNumber = 1;
  inline const ::std::string& curname() const;
  inline void set_curname(const ::std::string& value);
  inline void set_curname(const char* value);
  inline void set_curname(const char* value, size_t size);
  inline ::std::string* mutable_curname();
  inline ::std::string* release_curname();
  inline void set_allocated_curname(::std::string* curname);

  // required int32 curId = 2;
  inline bool has_curid() const;
  inline void clear_curid();
  static const int kCurIdFieldNumber = 2;
  inline ::google::protobuf::int32 curid() const;
  inline void set_curid(::google::protobuf::int32 value);

  // optional string curEmail = 3;
  inline bool has_curemail() const;
  inline void clear_curemail();
  static const int kCurEmailFieldNumber = 3;
  inline const ::std::string& curemail() const;
  inline void set_curemail(const ::std::string& value);
  inline void set_curemail(const char* value);
  inline void set_curemail(const char* value, size_t size);
  inline ::std::string* mutable_curemail();
  inline ::std::string* release_curemail();
  inline void set_allocated_curemail(::std::string* curemail);

  // repeated .ContactInfo.Person.PhoneNumber phone = 4;
  inline int phone_size() const;
  inline void clear_phone();
  static const int kPhoneFieldNumber = 4;
  inline const ::ContactInfo::Person_PhoneNumber& phone(int index) const;
  inline ::ContactInfo::Person_PhoneNumber* mutable_phone(int index);
  inline ::ContactInfo::Person_PhoneNumber* add_phone();
  inline const ::google::protobuf::RepeatedPtrField< ::ContactInfo::Person_PhoneNumber >&
      phone() const;
  inline ::google::protobuf::RepeatedPtrField< ::ContactInfo::Person_PhoneNumber >*
      mutable_phone();

  // @@protoc_insertion_point(class_scope:ContactInfo.Person)
 private:
  inline void set_has_curname();
  inline void clear_has_curname();
  inline void set_has_curid();
  inline void clear_has_curid();
  inline void set_has_curemail();
  inline void clear_has_curemail();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* curname_;
  ::std::string* curemail_;
  ::google::protobuf::RepeatedPtrField< ::ContactInfo::Person_PhoneNumber > phone_;
  ::google::protobuf::int32 curid_;
  friend void  protobuf_AddDesc_addressbook_2eproto();
  friend void protobuf_AssignDesc_addressbook_2eproto();
  friend void protobuf_ShutdownFile_addressbook_2eproto();

  void InitAsDefaultInstance();
  static Person* default_instance_;
};
// -------------------------------------------------------------------

class AddressBook : public ::google::protobuf::Message {
 public:
  AddressBook();
  virtual ~AddressBook();

  AddressBook(const AddressBook& from);

  inline AddressBook& operator=(const AddressBook& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AddressBook& default_instance();

  void Swap(AddressBook* other);

  // implements Message ----------------------------------------------

  AddressBook* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AddressBook& from);
  void MergeFrom(const AddressBook& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string owner = 10;
  inline bool has_owner() const;
  inline void clear_owner();
  static const int kOwnerFieldNumber = 10;
  inline const ::std::string& owner() const;
  inline void set_owner(const ::std::string& value);
  inline void set_owner(const char* value);
  inline void set_owner(const char* value, size_t size);
  inline ::std::string* mutable_owner();
  inline ::std::string* release_owner();
  inline void set_allocated_owner(::std::string* owner);

  // repeated .ContactInfo.Person personInfo = 6;
  inline int personinfo_size() const;
  inline void clear_personinfo();
  static const int kPersonInfoFieldNumber = 6;
  inline const ::ContactInfo::Person& personinfo(int index) const;
  inline ::ContactInfo::Person* mutable_personinfo(int index);
  inline ::ContactInfo::Person* add_personinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::ContactInfo::Person >&
      personinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::ContactInfo::Person >*
      mutable_personinfo();

  // @@protoc_insertion_point(class_scope:ContactInfo.AddressBook)
 private:
  inline void set_has_owner();
  inline void clear_has_owner();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* owner_;
  ::google::protobuf::RepeatedPtrField< ::ContactInfo::Person > personinfo_;
  friend void  protobuf_AddDesc_addressbook_2eproto();
  friend void protobuf_AssignDesc_addressbook_2eproto();
  friend void protobuf_ShutdownFile_addressbook_2eproto();

  void InitAsDefaultInstance();
  static AddressBook* default_instance_;
};
// ===================================================================


// ===================================================================

// Person_PhoneNumber

// required string number = 4;
inline bool Person_PhoneNumber::has_number() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Person_PhoneNumber::set_has_number() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Person_PhoneNumber::clear_has_number() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Person_PhoneNumber::clear_number() {
  if (number_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    number_->clear();
  }
  clear_has_number();
}
inline const ::std::string& Person_PhoneNumber::number() const {
  // @@protoc_insertion_point(field_get:ContactInfo.Person.PhoneNumber.number)
  return *number_;
}
inline void Person_PhoneNumber::set_number(const ::std::string& value) {
  set_has_number();
  if (number_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    number_ = new ::std::string;
  }
  number_->assign(value);
  // @@protoc_insertion_point(field_set:ContactInfo.Person.PhoneNumber.number)
}
inline void Person_PhoneNumber::set_number(const char* value) {
  set_has_number();
  if (number_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    number_ = new ::std::string;
  }
  number_->assign(value);
  // @@protoc_insertion_point(field_set_char:ContactInfo.Person.PhoneNumber.number)
}
inline void Person_PhoneNumber::set_number(const char* value, size_t size) {
  set_has_number();
  if (number_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    number_ = new ::std::string;
  }
  number_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ContactInfo.Person.PhoneNumber.number)
}
inline ::std::string* Person_PhoneNumber::mutable_number() {
  set_has_number();
  if (number_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    number_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:ContactInfo.Person.PhoneNumber.number)
  return number_;
}
inline ::std::string* Person_PhoneNumber::release_number() {
  clear_has_number();
  if (number_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = number_;
    number_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Person_PhoneNumber::set_allocated_number(::std::string* number) {
  if (number_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete number_;
  }
  if (number) {
    set_has_number();
    number_ = number;
  } else {
    clear_has_number();
    number_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:ContactInfo.Person.PhoneNumber.number)
}

// optional .ContactInfo.Person.PhoneType type = 2 [default = HOME];
inline bool Person_PhoneNumber::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Person_PhoneNumber::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Person_PhoneNumber::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Person_PhoneNumber::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::ContactInfo::Person_PhoneType Person_PhoneNumber::type() const {
  // @@protoc_insertion_point(field_get:ContactInfo.Person.PhoneNumber.type)
  return static_cast< ::ContactInfo::Person_PhoneType >(type_);
}
inline void Person_PhoneNumber::set_type(::ContactInfo::Person_PhoneType value) {
  assert(::ContactInfo::Person_PhoneType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:ContactInfo.Person.PhoneNumber.type)
}

// -------------------------------------------------------------------

// Person

// required string curName = 1;
inline bool Person::has_curname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Person::set_has_curname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Person::clear_has_curname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Person::clear_curname() {
  if (curname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    curname_->clear();
  }
  clear_has_curname();
}
inline const ::std::string& Person::curname() const {
  // @@protoc_insertion_point(field_get:ContactInfo.Person.curName)
  return *curname_;
}
inline void Person::set_curname(const ::std::string& value) {
  set_has_curname();
  if (curname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    curname_ = new ::std::string;
  }
  curname_->assign(value);
  // @@protoc_insertion_point(field_set:ContactInfo.Person.curName)
}
inline void Person::set_curname(const char* value) {
  set_has_curname();
  if (curname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    curname_ = new ::std::string;
  }
  curname_->assign(value);
  // @@protoc_insertion_point(field_set_char:ContactInfo.Person.curName)
}
inline void Person::set_curname(const char* value, size_t size) {
  set_has_curname();
  if (curname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    curname_ = new ::std::string;
  }
  curname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ContactInfo.Person.curName)
}
inline ::std::string* Person::mutable_curname() {
  set_has_curname();
  if (curname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    curname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:ContactInfo.Person.curName)
  return curname_;
}
inline ::std::string* Person::release_curname() {
  clear_has_curname();
  if (curname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = curname_;
    curname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Person::set_allocated_curname(::std::string* curname) {
  if (curname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete curname_;
  }
  if (curname) {
    set_has_curname();
    curname_ = curname;
  } else {
    clear_has_curname();
    curname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:ContactInfo.Person.curName)
}

// required int32 curId = 2;
inline bool Person::has_curid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Person::set_has_curid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Person::clear_has_curid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Person::clear_curid() {
  curid_ = 0;
  clear_has_curid();
}
inline ::google::protobuf::int32 Person::curid() const {
  // @@protoc_insertion_point(field_get:ContactInfo.Person.curId)
  return curid_;
}
inline void Person::set_curid(::google::protobuf::int32 value) {
  set_has_curid();
  curid_ = value;
  // @@protoc_insertion_point(field_set:ContactInfo.Person.curId)
}

// optional string curEmail = 3;
inline bool Person::has_curemail() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Person::set_has_curemail() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Person::clear_has_curemail() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Person::clear_curemail() {
  if (curemail_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    curemail_->clear();
  }
  clear_has_curemail();
}
inline const ::std::string& Person::curemail() const {
  // @@protoc_insertion_point(field_get:ContactInfo.Person.curEmail)
  return *curemail_;
}
inline void Person::set_curemail(const ::std::string& value) {
  set_has_curemail();
  if (curemail_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    curemail_ = new ::std::string;
  }
  curemail_->assign(value);
  // @@protoc_insertion_point(field_set:ContactInfo.Person.curEmail)
}
inline void Person::set_curemail(const char* value) {
  set_has_curemail();
  if (curemail_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    curemail_ = new ::std::string;
  }
  curemail_->assign(value);
  // @@protoc_insertion_point(field_set_char:ContactInfo.Person.curEmail)
}
inline void Person::set_curemail(const char* value, size_t size) {
  set_has_curemail();
  if (curemail_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    curemail_ = new ::std::string;
  }
  curemail_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ContactInfo.Person.curEmail)
}
inline ::std::string* Person::mutable_curemail() {
  set_has_curemail();
  if (curemail_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    curemail_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:ContactInfo.Person.curEmail)
  return curemail_;
}
inline ::std::string* Person::release_curemail() {
  clear_has_curemail();
  if (curemail_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = curemail_;
    curemail_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Person::set_allocated_curemail(::std::string* curemail) {
  if (curemail_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete curemail_;
  }
  if (curemail) {
    set_has_curemail();
    curemail_ = curemail;
  } else {
    clear_has_curemail();
    curemail_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:ContactInfo.Person.curEmail)
}

// repeated .ContactInfo.Person.PhoneNumber phone = 4;
inline int Person::phone_size() const {
  return phone_.size();
}
inline void Person::clear_phone() {
  phone_.Clear();
}
inline const ::ContactInfo::Person_PhoneNumber& Person::phone(int index) const {
  // @@protoc_insertion_point(field_get:ContactInfo.Person.phone)
  return phone_.Get(index);
}
inline ::ContactInfo::Person_PhoneNumber* Person::mutable_phone(int index) {
  // @@protoc_insertion_point(field_mutable:ContactInfo.Person.phone)
  return phone_.Mutable(index);
}
inline ::ContactInfo::Person_PhoneNumber* Person::add_phone() {
  // @@protoc_insertion_point(field_add:ContactInfo.Person.phone)
  return phone_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ContactInfo::Person_PhoneNumber >&
Person::phone() const {
  // @@protoc_insertion_point(field_list:ContactInfo.Person.phone)
  return phone_;
}
inline ::google::protobuf::RepeatedPtrField< ::ContactInfo::Person_PhoneNumber >*
Person::mutable_phone() {
  // @@protoc_insertion_point(field_mutable_list:ContactInfo.Person.phone)
  return &phone_;
}

// -------------------------------------------------------------------

// AddressBook

// required string owner = 10;
inline bool AddressBook::has_owner() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AddressBook::set_has_owner() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AddressBook::clear_has_owner() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AddressBook::clear_owner() {
  if (owner_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    owner_->clear();
  }
  clear_has_owner();
}
inline const ::std::string& AddressBook::owner() const {
  // @@protoc_insertion_point(field_get:ContactInfo.AddressBook.owner)
  return *owner_;
}
inline void AddressBook::set_owner(const ::std::string& value) {
  set_has_owner();
  if (owner_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    owner_ = new ::std::string;
  }
  owner_->assign(value);
  // @@protoc_insertion_point(field_set:ContactInfo.AddressBook.owner)
}
inline void AddressBook::set_owner(const char* value) {
  set_has_owner();
  if (owner_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    owner_ = new ::std::string;
  }
  owner_->assign(value);
  // @@protoc_insertion_point(field_set_char:ContactInfo.AddressBook.owner)
}
inline void AddressBook::set_owner(const char* value, size_t size) {
  set_has_owner();
  if (owner_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    owner_ = new ::std::string;
  }
  owner_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ContactInfo.AddressBook.owner)
}
inline ::std::string* AddressBook::mutable_owner() {
  set_has_owner();
  if (owner_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    owner_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:ContactInfo.AddressBook.owner)
  return owner_;
}
inline ::std::string* AddressBook::release_owner() {
  clear_has_owner();
  if (owner_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = owner_;
    owner_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void AddressBook::set_allocated_owner(::std::string* owner) {
  if (owner_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete owner_;
  }
  if (owner) {
    set_has_owner();
    owner_ = owner;
  } else {
    clear_has_owner();
    owner_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:ContactInfo.AddressBook.owner)
}

// repeated .ContactInfo.Person personInfo = 6;
inline int AddressBook::personinfo_size() const {
  return personinfo_.size();
}
inline void AddressBook::clear_personinfo() {
  personinfo_.Clear();
}
inline const ::ContactInfo::Person& AddressBook::personinfo(int index) const {
  // @@protoc_insertion_point(field_get:ContactInfo.AddressBook.personInfo)
  return personinfo_.Get(index);
}
inline ::ContactInfo::Person* AddressBook::mutable_personinfo(int index) {
  // @@protoc_insertion_point(field_mutable:ContactInfo.AddressBook.personInfo)
  return personinfo_.Mutable(index);
}
inline ::ContactInfo::Person* AddressBook::add_personinfo() {
  // @@protoc_insertion_point(field_add:ContactInfo.AddressBook.personInfo)
  return personinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ContactInfo::Person >&
AddressBook::personinfo() const {
  // @@protoc_insertion_point(field_list:ContactInfo.AddressBook.personInfo)
  return personinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::ContactInfo::Person >*
AddressBook::mutable_personinfo() {
  // @@protoc_insertion_point(field_mutable_list:ContactInfo.AddressBook.personInfo)
  return &personinfo_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ContactInfo

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::ContactInfo::Person_PhoneType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ContactInfo::Person_PhoneType>() {
  return ::ContactInfo::Person_PhoneType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_addressbook_2eproto__INCLUDED
