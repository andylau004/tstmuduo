/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "transfer_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>




LoginParam::~LoginParam() throw() {
}


void LoginParam::__set_userType(const int8_t val) {
  this->userType = val;
}

void LoginParam::__set_user(const std::string& val) {
  this->user = val;
}

void LoginParam::__set_pwd(const std::string& val) {
  this->pwd = val;
}

void LoginParam::__set_macAddr(const std::string& val) {
  this->macAddr = val;
}

void LoginParam::__set_deviceType(const int8_t val) {
  this->deviceType = val;
}

void LoginParam::__set_tick(const int8_t val) {
  this->tick = val;
__isset.tick = true;
}

void LoginParam::__set_deviceInfo(const std::string& val) {
  this->deviceInfo = val;
__isset.deviceInfo = true;
}

void LoginParam::__set_status(const int8_t val) {
  this->status = val;
__isset.status = true;
}

void LoginParam::__set_status_flag(const int8_t val) {
  this->status_flag = val;
__isset.status_flag = true;
}

void LoginParam::__set_clientIP(const std::string& val) {
  this->clientIP = val;
__isset.clientIP = true;
}

void LoginParam::__set_version(const std::string& val) {
  this->version = val;
__isset.version = true;
}

void LoginParam::__set_sdkid(const int64_t val) {
  this->sdkid = val;
__isset.sdkid = true;
}

void LoginParam::__set_markSign(const std::string& val) {
  this->markSign = val;
__isset.markSign = true;
}

void LoginParam::__set_redirectUri(const std::string& val) {
  this->redirectUri = val;
__isset.redirectUri = true;
}

void LoginParam::__set_ip(const std::string& val) {
  this->ip = val;
__isset.ip = true;
}

uint32_t LoginParam::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->userType);
          this->__isset.userType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->user);
          this->__isset.user = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->pwd);
          this->__isset.pwd = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->macAddr);
          this->__isset.macAddr = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->deviceType);
          this->__isset.deviceType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 16:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->tick);
          this->__isset.tick = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 17:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->deviceInfo);
          this->__isset.deviceInfo = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 18:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->status);
          this->__isset.status = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 20:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->status_flag);
          this->__isset.status_flag = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 21:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->clientIP);
          this->__isset.clientIP = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 22:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->version);
          this->__isset.version = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 23:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->sdkid);
          this->__isset.sdkid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 24:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->markSign);
          this->__isset.markSign = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 25:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->redirectUri);
          this->__isset.redirectUri = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 200:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->ip);
          this->__isset.ip = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t LoginParam::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("LoginParam");

  xfer += oprot->writeFieldBegin("userType", ::apache::thrift::protocol::T_BYTE, 1);
  xfer += oprot->writeByte(this->userType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("user", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->user);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("pwd", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->pwd);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("macAddr", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->macAddr);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("deviceType", ::apache::thrift::protocol::T_BYTE, 5);
  xfer += oprot->writeByte(this->deviceType);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.tick) {
    xfer += oprot->writeFieldBegin("tick", ::apache::thrift::protocol::T_BYTE, 16);
    xfer += oprot->writeByte(this->tick);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.deviceInfo) {
    xfer += oprot->writeFieldBegin("deviceInfo", ::apache::thrift::protocol::T_STRING, 17);
    xfer += oprot->writeString(this->deviceInfo);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.status) {
    xfer += oprot->writeFieldBegin("status", ::apache::thrift::protocol::T_BYTE, 18);
    xfer += oprot->writeByte(this->status);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.status_flag) {
    xfer += oprot->writeFieldBegin("status_flag", ::apache::thrift::protocol::T_BYTE, 20);
    xfer += oprot->writeByte(this->status_flag);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.clientIP) {
    xfer += oprot->writeFieldBegin("clientIP", ::apache::thrift::protocol::T_STRING, 21);
    xfer += oprot->writeString(this->clientIP);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.version) {
    xfer += oprot->writeFieldBegin("version", ::apache::thrift::protocol::T_STRING, 22);
    xfer += oprot->writeString(this->version);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.sdkid) {
    xfer += oprot->writeFieldBegin("sdkid", ::apache::thrift::protocol::T_I64, 23);
    xfer += oprot->writeI64(this->sdkid);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.markSign) {
    xfer += oprot->writeFieldBegin("markSign", ::apache::thrift::protocol::T_STRING, 24);
    xfer += oprot->writeString(this->markSign);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.redirectUri) {
    xfer += oprot->writeFieldBegin("redirectUri", ::apache::thrift::protocol::T_STRING, 25);
    xfer += oprot->writeString(this->redirectUri);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.ip) {
    xfer += oprot->writeFieldBegin("ip", ::apache::thrift::protocol::T_STRING, 200);
    xfer += oprot->writeString(this->ip);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(LoginParam &a, LoginParam &b) {
  using ::std::swap;
  swap(a.userType, b.userType);
  swap(a.user, b.user);
  swap(a.pwd, b.pwd);
  swap(a.macAddr, b.macAddr);
  swap(a.deviceType, b.deviceType);
  swap(a.tick, b.tick);
  swap(a.deviceInfo, b.deviceInfo);
  swap(a.status, b.status);
  swap(a.status_flag, b.status_flag);
  swap(a.clientIP, b.clientIP);
  swap(a.version, b.version);
  swap(a.sdkid, b.sdkid);
  swap(a.markSign, b.markSign);
  swap(a.redirectUri, b.redirectUri);
  swap(a.ip, b.ip);
  swap(a.__isset, b.__isset);
}

LoginParam::LoginParam(const LoginParam& other0) {
  userType = other0.userType;
  user = other0.user;
  pwd = other0.pwd;
  macAddr = other0.macAddr;
  deviceType = other0.deviceType;
  tick = other0.tick;
  deviceInfo = other0.deviceInfo;
  status = other0.status;
  status_flag = other0.status_flag;
  clientIP = other0.clientIP;
  version = other0.version;
  sdkid = other0.sdkid;
  markSign = other0.markSign;
  redirectUri = other0.redirectUri;
  ip = other0.ip;
  __isset = other0.__isset;
}
LoginParam::LoginParam( LoginParam&& other1) {
  userType = std::move(other1.userType);
  user = std::move(other1.user);
  pwd = std::move(other1.pwd);
  macAddr = std::move(other1.macAddr);
  deviceType = std::move(other1.deviceType);
  tick = std::move(other1.tick);
  deviceInfo = std::move(other1.deviceInfo);
  status = std::move(other1.status);
  status_flag = std::move(other1.status_flag);
  clientIP = std::move(other1.clientIP);
  version = std::move(other1.version);
  sdkid = std::move(other1.sdkid);
  markSign = std::move(other1.markSign);
  redirectUri = std::move(other1.redirectUri);
  ip = std::move(other1.ip);
  __isset = std::move(other1.__isset);
}
LoginParam& LoginParam::operator=(const LoginParam& other2) {
  userType = other2.userType;
  user = other2.user;
  pwd = other2.pwd;
  macAddr = other2.macAddr;
  deviceType = other2.deviceType;
  tick = other2.tick;
  deviceInfo = other2.deviceInfo;
  status = other2.status;
  status_flag = other2.status_flag;
  clientIP = other2.clientIP;
  version = other2.version;
  sdkid = other2.sdkid;
  markSign = other2.markSign;
  redirectUri = other2.redirectUri;
  ip = other2.ip;
  __isset = other2.__isset;
  return *this;
}
LoginParam& LoginParam::operator=(LoginParam&& other3) {
  userType = std::move(other3.userType);
  user = std::move(other3.user);
  pwd = std::move(other3.pwd);
  macAddr = std::move(other3.macAddr);
  deviceType = std::move(other3.deviceType);
  tick = std::move(other3.tick);
  deviceInfo = std::move(other3.deviceInfo);
  status = std::move(other3.status);
  status_flag = std::move(other3.status_flag);
  clientIP = std::move(other3.clientIP);
  version = std::move(other3.version);
  sdkid = std::move(other3.sdkid);
  markSign = std::move(other3.markSign);
  redirectUri = std::move(other3.redirectUri);
  ip = std::move(other3.ip);
  __isset = std::move(other3.__isset);
  return *this;
}
void LoginParam::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "LoginParam(";
  out << "userType=" << to_string(userType);
  out << ", " << "user=" << to_string(user);
  out << ", " << "pwd=" << to_string(pwd);
  out << ", " << "macAddr=" << to_string(macAddr);
  out << ", " << "deviceType=" << to_string(deviceType);
  out << ", " << "tick="; (__isset.tick ? (out << to_string(tick)) : (out << "<null>"));
  out << ", " << "deviceInfo="; (__isset.deviceInfo ? (out << to_string(deviceInfo)) : (out << "<null>"));
  out << ", " << "status="; (__isset.status ? (out << to_string(status)) : (out << "<null>"));
  out << ", " << "status_flag="; (__isset.status_flag ? (out << to_string(status_flag)) : (out << "<null>"));
  out << ", " << "clientIP="; (__isset.clientIP ? (out << to_string(clientIP)) : (out << "<null>"));
  out << ", " << "version="; (__isset.version ? (out << to_string(version)) : (out << "<null>"));
  out << ", " << "sdkid="; (__isset.sdkid ? (out << to_string(sdkid)) : (out << "<null>"));
  out << ", " << "markSign="; (__isset.markSign ? (out << to_string(markSign)) : (out << "<null>"));
  out << ", " << "redirectUri="; (__isset.redirectUri ? (out << to_string(redirectUri)) : (out << "<null>"));
  out << ", " << "ip="; (__isset.ip ? (out << to_string(ip)) : (out << "<null>"));
  out << ")";
}


LoginResult::~LoginResult() throw() {
}


void LoginResult::__set_code(const int32_t val) {
  this->code = val;
}

void LoginResult::__set_what(const std::string& val) {
  this->what = val;
__isset.what = true;
}

void LoginResult::__set_sessionTimeout(const int32_t val) {
  this->sessionTimeout = val;
__isset.sessionTimeout = true;
}

void LoginResult::__set_sessionID(const int64_t val) {
  this->sessionID = val;
__isset.sessionID = true;
}

void LoginResult::__set_userID(const int64_t val) {
  this->userID = val;
__isset.userID = true;
}

void LoginResult::__set_serverTime(const int64_t val) {
  this->serverTime = val;
__isset.serverTime = true;
}

void LoginResult::__set_privateKey(const std::string& val) {
  this->privateKey = val;
__isset.privateKey = true;
}

void LoginResult::__set_ticket(const std::string& val) {
  this->ticket = val;
__isset.ticket = true;
}

void LoginResult::__set_area(const std::string& val) {
  this->area = val;
__isset.area = true;
}

void LoginResult::__set_captcha(const std::string& val) {
  this->captcha = val;
__isset.captcha = true;
}

void LoginResult::__set_remainLockTime(const int64_t val) {
  this->remainLockTime = val;
__isset.remainLockTime = true;
}

uint32_t LoginResult::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->code);
          this->__isset.code = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->what);
          this->__isset.what = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sessionTimeout);
          this->__isset.sessionTimeout = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->sessionID);
          this->__isset.sessionID = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->userID);
          this->__isset.userID = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->serverTime);
          this->__isset.serverTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->privateKey);
          this->__isset.privateKey = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->ticket);
          this->__isset.ticket = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->area);
          this->__isset.area = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->captcha);
          this->__isset.captcha = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->remainLockTime);
          this->__isset.remainLockTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t LoginResult::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("LoginResult");

  xfer += oprot->writeFieldBegin("code", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->code);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.what) {
    xfer += oprot->writeFieldBegin("what", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->what);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.sessionTimeout) {
    xfer += oprot->writeFieldBegin("sessionTimeout", ::apache::thrift::protocol::T_I32, 3);
    xfer += oprot->writeI32(this->sessionTimeout);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.sessionID) {
    xfer += oprot->writeFieldBegin("sessionID", ::apache::thrift::protocol::T_I64, 4);
    xfer += oprot->writeI64(this->sessionID);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.userID) {
    xfer += oprot->writeFieldBegin("userID", ::apache::thrift::protocol::T_I64, 5);
    xfer += oprot->writeI64(this->userID);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.serverTime) {
    xfer += oprot->writeFieldBegin("serverTime", ::apache::thrift::protocol::T_I64, 6);
    xfer += oprot->writeI64(this->serverTime);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.privateKey) {
    xfer += oprot->writeFieldBegin("privateKey", ::apache::thrift::protocol::T_STRING, 7);
    xfer += oprot->writeString(this->privateKey);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.ticket) {
    xfer += oprot->writeFieldBegin("ticket", ::apache::thrift::protocol::T_STRING, 8);
    xfer += oprot->writeString(this->ticket);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.area) {
    xfer += oprot->writeFieldBegin("area", ::apache::thrift::protocol::T_STRING, 9);
    xfer += oprot->writeString(this->area);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.captcha) {
    xfer += oprot->writeFieldBegin("captcha", ::apache::thrift::protocol::T_STRING, 10);
    xfer += oprot->writeString(this->captcha);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.remainLockTime) {
    xfer += oprot->writeFieldBegin("remainLockTime", ::apache::thrift::protocol::T_I64, 11);
    xfer += oprot->writeI64(this->remainLockTime);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(LoginResult &a, LoginResult &b) {
  using ::std::swap;
  swap(a.code, b.code);
  swap(a.what, b.what);
  swap(a.sessionTimeout, b.sessionTimeout);
  swap(a.sessionID, b.sessionID);
  swap(a.userID, b.userID);
  swap(a.serverTime, b.serverTime);
  swap(a.privateKey, b.privateKey);
  swap(a.ticket, b.ticket);
  swap(a.area, b.area);
  swap(a.captcha, b.captcha);
  swap(a.remainLockTime, b.remainLockTime);
  swap(a.__isset, b.__isset);
}

LoginResult::LoginResult(const LoginResult& other4) {
  code = other4.code;
  what = other4.what;
  sessionTimeout = other4.sessionTimeout;
  sessionID = other4.sessionID;
  userID = other4.userID;
  serverTime = other4.serverTime;
  privateKey = other4.privateKey;
  ticket = other4.ticket;
  area = other4.area;
  captcha = other4.captcha;
  remainLockTime = other4.remainLockTime;
  __isset = other4.__isset;
}
LoginResult::LoginResult( LoginResult&& other5) {
  code = std::move(other5.code);
  what = std::move(other5.what);
  sessionTimeout = std::move(other5.sessionTimeout);
  sessionID = std::move(other5.sessionID);
  userID = std::move(other5.userID);
  serverTime = std::move(other5.serverTime);
  privateKey = std::move(other5.privateKey);
  ticket = std::move(other5.ticket);
  area = std::move(other5.area);
  captcha = std::move(other5.captcha);
  remainLockTime = std::move(other5.remainLockTime);
  __isset = std::move(other5.__isset);
}
LoginResult& LoginResult::operator=(const LoginResult& other6) {
  code = other6.code;
  what = other6.what;
  sessionTimeout = other6.sessionTimeout;
  sessionID = other6.sessionID;
  userID = other6.userID;
  serverTime = other6.serverTime;
  privateKey = other6.privateKey;
  ticket = other6.ticket;
  area = other6.area;
  captcha = other6.captcha;
  remainLockTime = other6.remainLockTime;
  __isset = other6.__isset;
  return *this;
}
LoginResult& LoginResult::operator=(LoginResult&& other7) {
  code = std::move(other7.code);
  what = std::move(other7.what);
  sessionTimeout = std::move(other7.sessionTimeout);
  sessionID = std::move(other7.sessionID);
  userID = std::move(other7.userID);
  serverTime = std::move(other7.serverTime);
  privateKey = std::move(other7.privateKey);
  ticket = std::move(other7.ticket);
  area = std::move(other7.area);
  captcha = std::move(other7.captcha);
  remainLockTime = std::move(other7.remainLockTime);
  __isset = std::move(other7.__isset);
  return *this;
}
void LoginResult::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "LoginResult(";
  out << "code=" << to_string(code);
  out << ", " << "what="; (__isset.what ? (out << to_string(what)) : (out << "<null>"));
  out << ", " << "sessionTimeout="; (__isset.sessionTimeout ? (out << to_string(sessionTimeout)) : (out << "<null>"));
  out << ", " << "sessionID="; (__isset.sessionID ? (out << to_string(sessionID)) : (out << "<null>"));
  out << ", " << "userID="; (__isset.userID ? (out << to_string(userID)) : (out << "<null>"));
  out << ", " << "serverTime="; (__isset.serverTime ? (out << to_string(serverTime)) : (out << "<null>"));
  out << ", " << "privateKey="; (__isset.privateKey ? (out << to_string(privateKey)) : (out << "<null>"));
  out << ", " << "ticket="; (__isset.ticket ? (out << to_string(ticket)) : (out << "<null>"));
  out << ", " << "area="; (__isset.area ? (out << to_string(area)) : (out << "<null>"));
  out << ", " << "captcha="; (__isset.captcha ? (out << to_string(captcha)) : (out << "<null>"));
  out << ", " << "remainLockTime="; (__isset.remainLockTime ? (out << to_string(remainLockTime)) : (out << "<null>"));
  out << ")";
}


SendEmptyRequestReq::~SendEmptyRequestReq() throw() {
}


void SendEmptyRequestReq::__set_sessionID(const int64_t val) {
  this->sessionID = val;
}

void SendEmptyRequestReq::__set_ticket(const std::string& val) {
  this->ticket = val;
}

void SendEmptyRequestReq::__set_notifyID(const int64_t val) {
  this->notifyID = val;
}

void SendEmptyRequestReq::__set_timeout(const int32_t val) {
  this->timeout = val;
__isset.timeout = true;
}

void SendEmptyRequestReq::__set_nextReqInterval(const int32_t val) {
  this->nextReqInterval = val;
__isset.nextReqInterval = true;
}

uint32_t SendEmptyRequestReq::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->sessionID);
          this->__isset.sessionID = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->ticket);
          this->__isset.ticket = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->notifyID);
          this->__isset.notifyID = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->timeout);
          this->__isset.timeout = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->nextReqInterval);
          this->__isset.nextReqInterval = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SendEmptyRequestReq::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("SendEmptyRequestReq");

  xfer += oprot->writeFieldBegin("sessionID", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->sessionID);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ticket", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->ticket);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("notifyID", ::apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64(this->notifyID);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.timeout) {
    xfer += oprot->writeFieldBegin("timeout", ::apache::thrift::protocol::T_I32, 4);
    xfer += oprot->writeI32(this->timeout);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.nextReqInterval) {
    xfer += oprot->writeFieldBegin("nextReqInterval", ::apache::thrift::protocol::T_I32, 5);
    xfer += oprot->writeI32(this->nextReqInterval);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SendEmptyRequestReq &a, SendEmptyRequestReq &b) {
  using ::std::swap;
  swap(a.sessionID, b.sessionID);
  swap(a.ticket, b.ticket);
  swap(a.notifyID, b.notifyID);
  swap(a.timeout, b.timeout);
  swap(a.nextReqInterval, b.nextReqInterval);
  swap(a.__isset, b.__isset);
}

SendEmptyRequestReq::SendEmptyRequestReq(const SendEmptyRequestReq& other8) {
  sessionID = other8.sessionID;
  ticket = other8.ticket;
  notifyID = other8.notifyID;
  timeout = other8.timeout;
  nextReqInterval = other8.nextReqInterval;
  __isset = other8.__isset;
}
SendEmptyRequestReq::SendEmptyRequestReq( SendEmptyRequestReq&& other9) {
  sessionID = std::move(other9.sessionID);
  ticket = std::move(other9.ticket);
  notifyID = std::move(other9.notifyID);
  timeout = std::move(other9.timeout);
  nextReqInterval = std::move(other9.nextReqInterval);
  __isset = std::move(other9.__isset);
}
SendEmptyRequestReq& SendEmptyRequestReq::operator=(const SendEmptyRequestReq& other10) {
  sessionID = other10.sessionID;
  ticket = other10.ticket;
  notifyID = other10.notifyID;
  timeout = other10.timeout;
  nextReqInterval = other10.nextReqInterval;
  __isset = other10.__isset;
  return *this;
}
SendEmptyRequestReq& SendEmptyRequestReq::operator=(SendEmptyRequestReq&& other11) {
  sessionID = std::move(other11.sessionID);
  ticket = std::move(other11.ticket);
  notifyID = std::move(other11.notifyID);
  timeout = std::move(other11.timeout);
  nextReqInterval = std::move(other11.nextReqInterval);
  __isset = std::move(other11.__isset);
  return *this;
}
void SendEmptyRequestReq::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "SendEmptyRequestReq(";
  out << "sessionID=" << to_string(sessionID);
  out << ", " << "ticket=" << to_string(ticket);
  out << ", " << "notifyID=" << to_string(notifyID);
  out << ", " << "timeout="; (__isset.timeout ? (out << to_string(timeout)) : (out << "<null>"));
  out << ", " << "nextReqInterval="; (__isset.nextReqInterval ? (out << to_string(nextReqInterval)) : (out << "<null>"));
  out << ")";
}


OneFile::~OneFile() throw() {
}


void OneFile::__set_name(const std::string& val) {
  this->name = val;
}

void OneFile::__set_file_type(const std::string& val) {
  this->file_type = val;
}

void OneFile::__set_file_buffer(const std::string& val) {
  this->file_buffer = val;
}

void OneFile::__set_file_size(const int64_t val) {
  this->file_size = val;
}

void OneFile::__set_file_hsh(const std::string& val) {
  this->file_hsh = val;
}

uint32_t OneFile::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->file_type);
          this->__isset.file_type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->file_buffer);
          this->__isset.file_buffer = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->file_size);
          this->__isset.file_size = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->file_hsh);
          this->__isset.file_hsh = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t OneFile::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("OneFile");

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("file_type", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->file_type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("file_buffer", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeBinary(this->file_buffer);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("file_size", ::apache::thrift::protocol::T_I64, 4);
  xfer += oprot->writeI64(this->file_size);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("file_hsh", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->file_hsh);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(OneFile &a, OneFile &b) {
  using ::std::swap;
  swap(a.name, b.name);
  swap(a.file_type, b.file_type);
  swap(a.file_buffer, b.file_buffer);
  swap(a.file_size, b.file_size);
  swap(a.file_hsh, b.file_hsh);
  swap(a.__isset, b.__isset);
}

OneFile::OneFile(const OneFile& other12) {
  name = other12.name;
  file_type = other12.file_type;
  file_buffer = other12.file_buffer;
  file_size = other12.file_size;
  file_hsh = other12.file_hsh;
  __isset = other12.__isset;
}
OneFile::OneFile( OneFile&& other13) {
  name = std::move(other13.name);
  file_type = std::move(other13.file_type);
  file_buffer = std::move(other13.file_buffer);
  file_size = std::move(other13.file_size);
  file_hsh = std::move(other13.file_hsh);
  __isset = std::move(other13.__isset);
}
OneFile& OneFile::operator=(const OneFile& other14) {
  name = other14.name;
  file_type = other14.file_type;
  file_buffer = other14.file_buffer;
  file_size = other14.file_size;
  file_hsh = other14.file_hsh;
  __isset = other14.__isset;
  return *this;
}
OneFile& OneFile::operator=(OneFile&& other15) {
  name = std::move(other15.name);
  file_type = std::move(other15.file_type);
  file_buffer = std::move(other15.file_buffer);
  file_size = std::move(other15.file_size);
  file_hsh = std::move(other15.file_hsh);
  __isset = std::move(other15.__isset);
  return *this;
}
void OneFile::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "OneFile(";
  out << "name=" << to_string(name);
  out << ", " << "file_type=" << to_string(file_type);
  out << ", " << "file_buffer=" << to_string(file_buffer);
  out << ", " << "file_size=" << to_string(file_size);
  out << ", " << "file_hsh=" << to_string(file_hsh);
  out << ")";
}


OneFileDeriveEx::~OneFileDeriveEx() throw() {
}


void OneFileDeriveEx::__set_one_file_obj(const OneFile& val) {
  this->one_file_obj = val;
}

void OneFileDeriveEx::__set_str_extent_1(const std::string& val) {
  this->str_extent_1 = val;
}

void OneFileDeriveEx::__set_int_extent_1(const int32_t val) {
  this->int_extent_1 = val;
}

uint32_t OneFileDeriveEx::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->one_file_obj.read(iprot);
          this->__isset.one_file_obj = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->str_extent_1);
          this->__isset.str_extent_1 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->int_extent_1);
          this->__isset.int_extent_1 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t OneFileDeriveEx::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("OneFileDeriveEx");

  xfer += oprot->writeFieldBegin("one_file_obj", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->one_file_obj.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("str_extent_1", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->str_extent_1);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("int_extent_1", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->int_extent_1);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(OneFileDeriveEx &a, OneFileDeriveEx &b) {
  using ::std::swap;
  swap(a.one_file_obj, b.one_file_obj);
  swap(a.str_extent_1, b.str_extent_1);
  swap(a.int_extent_1, b.int_extent_1);
  swap(a.__isset, b.__isset);
}

OneFileDeriveEx::OneFileDeriveEx(const OneFileDeriveEx& other16) {
  one_file_obj = other16.one_file_obj;
  str_extent_1 = other16.str_extent_1;
  int_extent_1 = other16.int_extent_1;
  __isset = other16.__isset;
}
OneFileDeriveEx::OneFileDeriveEx( OneFileDeriveEx&& other17) {
  one_file_obj = std::move(other17.one_file_obj);
  str_extent_1 = std::move(other17.str_extent_1);
  int_extent_1 = std::move(other17.int_extent_1);
  __isset = std::move(other17.__isset);
}
OneFileDeriveEx& OneFileDeriveEx::operator=(const OneFileDeriveEx& other18) {
  one_file_obj = other18.one_file_obj;
  str_extent_1 = other18.str_extent_1;
  int_extent_1 = other18.int_extent_1;
  __isset = other18.__isset;
  return *this;
}
OneFileDeriveEx& OneFileDeriveEx::operator=(OneFileDeriveEx&& other19) {
  one_file_obj = std::move(other19.one_file_obj);
  str_extent_1 = std::move(other19.str_extent_1);
  int_extent_1 = std::move(other19.int_extent_1);
  __isset = std::move(other19.__isset);
  return *this;
}
void OneFileDeriveEx::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "OneFileDeriveEx(";
  out << "one_file_obj=" << to_string(one_file_obj);
  out << ", " << "str_extent_1=" << to_string(str_extent_1);
  out << ", " << "int_extent_1=" << to_string(int_extent_1);
  out << ")";
}


