/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef Photo_H
#define Photo_H

#include <thrift/TDispatchProcessor.h>
#include "transfer_types.h"



#ifdef _WIN32
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class PhotoIf {
 public:
  virtual ~PhotoIf() {}
  virtual void login_im(LoginResult& _return, const LoginParam& param) = 0;
  virtual bool SendPhoto(const OneFile& onefile) = 0;
  virtual int32_t Add(const int32_t add1, const int32_t add2) = 0;
  virtual void SendEmptyRequest(const SendEmptyRequestReq& req) = 0;
};

class PhotoIfFactory {
 public:
  typedef PhotoIf Handler;

  virtual ~PhotoIfFactory() {}

  virtual PhotoIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(PhotoIf* /* handler */) = 0;
};

typedef struct _Photo_login_im_args__isset {
  _Photo_login_im_args__isset() : param(false) {}
  bool param :1;
} _Photo_login_im_args__isset;

class Photo_login_im_args {
 public:

  Photo_login_im_args(const Photo_login_im_args&);
  Photo_login_im_args(Photo_login_im_args&&);
  Photo_login_im_args& operator=(const Photo_login_im_args&);
  Photo_login_im_args& operator=(Photo_login_im_args&&);
  Photo_login_im_args() {
  }

  virtual ~Photo_login_im_args() throw();
  LoginParam param;

  _Photo_login_im_args__isset __isset;

  void __set_param(const LoginParam& val);

  bool operator == (const Photo_login_im_args & rhs) const
  {
    if (!(param == rhs.param))
      return false;
    return true;
  }
  bool operator != (const Photo_login_im_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Photo_login_im_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Photo_login_im_pargs {
 public:


  virtual ~Photo_login_im_pargs() throw();
  const LoginParam* param;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Photo_login_im_result__isset {
  _Photo_login_im_result__isset() : success(false) {}
  bool success :1;
} _Photo_login_im_result__isset;

class Photo_login_im_result {
 public:

  Photo_login_im_result(const Photo_login_im_result&);
  Photo_login_im_result(Photo_login_im_result&&);
  Photo_login_im_result& operator=(const Photo_login_im_result&);
  Photo_login_im_result& operator=(Photo_login_im_result&&);
  Photo_login_im_result() {
  }

  virtual ~Photo_login_im_result() throw();
  LoginResult success;

  _Photo_login_im_result__isset __isset;

  void __set_success(const LoginResult& val);

  bool operator == (const Photo_login_im_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Photo_login_im_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Photo_login_im_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Photo_login_im_presult__isset {
  _Photo_login_im_presult__isset() : success(false) {}
  bool success :1;
} _Photo_login_im_presult__isset;

class Photo_login_im_presult {
 public:


  virtual ~Photo_login_im_presult() throw();
  LoginResult* success;

  _Photo_login_im_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Photo_SendPhoto_args__isset {
  _Photo_SendPhoto_args__isset() : onefile(false) {}
  bool onefile :1;
} _Photo_SendPhoto_args__isset;

class Photo_SendPhoto_args {
 public:

  Photo_SendPhoto_args(const Photo_SendPhoto_args&);
  Photo_SendPhoto_args(Photo_SendPhoto_args&&);
  Photo_SendPhoto_args& operator=(const Photo_SendPhoto_args&);
  Photo_SendPhoto_args& operator=(Photo_SendPhoto_args&&);
  Photo_SendPhoto_args() {
  }

  virtual ~Photo_SendPhoto_args() throw();
  OneFile onefile;

  _Photo_SendPhoto_args__isset __isset;

  void __set_onefile(const OneFile& val);

  bool operator == (const Photo_SendPhoto_args & rhs) const
  {
    if (!(onefile == rhs.onefile))
      return false;
    return true;
  }
  bool operator != (const Photo_SendPhoto_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Photo_SendPhoto_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Photo_SendPhoto_pargs {
 public:


  virtual ~Photo_SendPhoto_pargs() throw();
  const OneFile* onefile;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Photo_SendPhoto_result__isset {
  _Photo_SendPhoto_result__isset() : success(false) {}
  bool success :1;
} _Photo_SendPhoto_result__isset;

class Photo_SendPhoto_result {
 public:

  Photo_SendPhoto_result(const Photo_SendPhoto_result&);
  Photo_SendPhoto_result(Photo_SendPhoto_result&&);
  Photo_SendPhoto_result& operator=(const Photo_SendPhoto_result&);
  Photo_SendPhoto_result& operator=(Photo_SendPhoto_result&&);
  Photo_SendPhoto_result() : success(0) {
  }

  virtual ~Photo_SendPhoto_result() throw();
  bool success;

  _Photo_SendPhoto_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const Photo_SendPhoto_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Photo_SendPhoto_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Photo_SendPhoto_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Photo_SendPhoto_presult__isset {
  _Photo_SendPhoto_presult__isset() : success(false) {}
  bool success :1;
} _Photo_SendPhoto_presult__isset;

class Photo_SendPhoto_presult {
 public:


  virtual ~Photo_SendPhoto_presult() throw();
  bool* success;

  _Photo_SendPhoto_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Photo_Add_args__isset {
  _Photo_Add_args__isset() : add1(false), add2(false) {}
  bool add1 :1;
  bool add2 :1;
} _Photo_Add_args__isset;

class Photo_Add_args {
 public:

  Photo_Add_args(const Photo_Add_args&);
  Photo_Add_args(Photo_Add_args&&);
  Photo_Add_args& operator=(const Photo_Add_args&);
  Photo_Add_args& operator=(Photo_Add_args&&);
  Photo_Add_args() : add1(0), add2(0) {
  }

  virtual ~Photo_Add_args() throw();
  int32_t add1;
  int32_t add2;

  _Photo_Add_args__isset __isset;

  void __set_add1(const int32_t val);

  void __set_add2(const int32_t val);

  bool operator == (const Photo_Add_args & rhs) const
  {
    if (!(add1 == rhs.add1))
      return false;
    if (!(add2 == rhs.add2))
      return false;
    return true;
  }
  bool operator != (const Photo_Add_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Photo_Add_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Photo_Add_pargs {
 public:


  virtual ~Photo_Add_pargs() throw();
  const int32_t* add1;
  const int32_t* add2;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Photo_Add_result__isset {
  _Photo_Add_result__isset() : success(false) {}
  bool success :1;
} _Photo_Add_result__isset;

class Photo_Add_result {
 public:

  Photo_Add_result(const Photo_Add_result&);
  Photo_Add_result(Photo_Add_result&&);
  Photo_Add_result& operator=(const Photo_Add_result&);
  Photo_Add_result& operator=(Photo_Add_result&&);
  Photo_Add_result() : success(0) {
  }

  virtual ~Photo_Add_result() throw();
  int32_t success;

  _Photo_Add_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const Photo_Add_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Photo_Add_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Photo_Add_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Photo_Add_presult__isset {
  _Photo_Add_presult__isset() : success(false) {}
  bool success :1;
} _Photo_Add_presult__isset;

class Photo_Add_presult {
 public:


  virtual ~Photo_Add_presult() throw();
  int32_t* success;

  _Photo_Add_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Photo_SendEmptyRequest_args__isset {
  _Photo_SendEmptyRequest_args__isset() : req(false) {}
  bool req :1;
} _Photo_SendEmptyRequest_args__isset;

class Photo_SendEmptyRequest_args {
 public:

  Photo_SendEmptyRequest_args(const Photo_SendEmptyRequest_args&);
  Photo_SendEmptyRequest_args(Photo_SendEmptyRequest_args&&);
  Photo_SendEmptyRequest_args& operator=(const Photo_SendEmptyRequest_args&);
  Photo_SendEmptyRequest_args& operator=(Photo_SendEmptyRequest_args&&);
  Photo_SendEmptyRequest_args() {
  }

  virtual ~Photo_SendEmptyRequest_args() throw();
  SendEmptyRequestReq req;

  _Photo_SendEmptyRequest_args__isset __isset;

  void __set_req(const SendEmptyRequestReq& val);

  bool operator == (const Photo_SendEmptyRequest_args & rhs) const
  {
    if (!(req == rhs.req))
      return false;
    return true;
  }
  bool operator != (const Photo_SendEmptyRequest_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Photo_SendEmptyRequest_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Photo_SendEmptyRequest_pargs {
 public:


  virtual ~Photo_SendEmptyRequest_pargs() throw();
  const SendEmptyRequestReq* req;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

class PhotoClient : virtual public PhotoIf {
 public:
  PhotoClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  PhotoClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void login_im(LoginResult& _return, const LoginParam& param);
  void send_login_im(const LoginParam& param);
  void recv_login_im(LoginResult& _return);
  bool SendPhoto(const OneFile& onefile);
  void send_SendPhoto(const OneFile& onefile);
  bool recv_SendPhoto();
  int32_t Add(const int32_t add1, const int32_t add2);
  void send_Add(const int32_t add1, const int32_t add2);
  int32_t recv_Add();
  void SendEmptyRequest(const SendEmptyRequestReq& req);
  void send_SendEmptyRequest(const SendEmptyRequestReq& req);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class PhotoProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<PhotoIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (PhotoProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_login_im(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_SendPhoto(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Add(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_SendEmptyRequest(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  PhotoProcessor(boost::shared_ptr<PhotoIf> iface) :
    iface_(iface) {
    processMap_["login_im"] = &PhotoProcessor::process_login_im;
    processMap_["SendPhoto"] = &PhotoProcessor::process_SendPhoto;
    processMap_["Add"] = &PhotoProcessor::process_Add;
    processMap_["SendEmptyRequest"] = &PhotoProcessor::process_SendEmptyRequest;
  }

  virtual ~PhotoProcessor() {}
};

class PhotoProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  PhotoProcessorFactory(const ::boost::shared_ptr< PhotoIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< PhotoIfFactory > handlerFactory_;
};

#ifdef _WIN32
  #pragma warning( pop )
#endif



#endif
