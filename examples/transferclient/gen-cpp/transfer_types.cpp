/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "transfer_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>




OneFile::~OneFile() throw() {
}


void OneFile::__set_name(const std::string& val) {
  this->name = val;
}

void OneFile::__set_file_type(const std::string& val) {
  this->file_type = val;
}

void OneFile::__set_file_buffer(const std::string& val) {
  this->file_buffer = val;
}

void OneFile::__set_file_size(const int64_t val) {
  this->file_size = val;
}

void OneFile::__set_file_hsh(const std::string& val) {
  this->file_hsh = val;
}

uint32_t OneFile::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->file_type);
          this->__isset.file_type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->file_buffer);
          this->__isset.file_buffer = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->file_size);
          this->__isset.file_size = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->file_hsh);
          this->__isset.file_hsh = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t OneFile::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("OneFile");

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("file_type", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->file_type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("file_buffer", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeBinary(this->file_buffer);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("file_size", ::apache::thrift::protocol::T_I64, 4);
  xfer += oprot->writeI64(this->file_size);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("file_hsh", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->file_hsh);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(OneFile &a, OneFile &b) {
  using ::std::swap;
  swap(a.name, b.name);
  swap(a.file_type, b.file_type);
  swap(a.file_buffer, b.file_buffer);
  swap(a.file_size, b.file_size);
  swap(a.file_hsh, b.file_hsh);
  swap(a.__isset, b.__isset);
}

OneFile::OneFile(const OneFile& other0) {
  name = other0.name;
  file_type = other0.file_type;
  file_buffer = other0.file_buffer;
  file_size = other0.file_size;
  file_hsh = other0.file_hsh;
  __isset = other0.__isset;
}
OneFile& OneFile::operator=(const OneFile& other1) {
  name = other1.name;
  file_type = other1.file_type;
  file_buffer = other1.file_buffer;
  file_size = other1.file_size;
  file_hsh = other1.file_hsh;
  __isset = other1.__isset;
  return *this;
}
void OneFile::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "OneFile(";
  out << "name=" << to_string(name);
  out << ", " << "file_type=" << to_string(file_type);
  out << ", " << "file_buffer=" << to_string(file_buffer);
  out << ", " << "file_size=" << to_string(file_size);
  out << ", " << "file_hsh=" << to_string(file_hsh);
  out << ")";
}


