// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: resolver.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_resolver_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_resolver_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_resolver_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_resolver_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_resolver_2eproto;
namespace resolver {
class ResolveRequest;
class ResolveRequestDefaultTypeInternal;
extern ResolveRequestDefaultTypeInternal _ResolveRequest_default_instance_;
class ResolveResponse;
class ResolveResponseDefaultTypeInternal;
extern ResolveResponseDefaultTypeInternal _ResolveResponse_default_instance_;
}  // namespace resolver
PROTOBUF_NAMESPACE_OPEN
template<> ::resolver::ResolveRequest* Arena::CreateMaybeMessage<::resolver::ResolveRequest>(Arena*);
template<> ::resolver::ResolveResponse* Arena::CreateMaybeMessage<::resolver::ResolveResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace resolver {

// ===================================================================

class ResolveRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:resolver.ResolveRequest) */ {
 public:
  inline ResolveRequest() : ResolveRequest(nullptr) {}
  virtual ~ResolveRequest();

  ResolveRequest(const ResolveRequest& from);
  ResolveRequest(ResolveRequest&& from) noexcept
    : ResolveRequest() {
    *this = ::std::move(from);
  }

  inline ResolveRequest& operator=(const ResolveRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResolveRequest& operator=(ResolveRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ResolveRequest& default_instance();

  static inline const ResolveRequest* internal_default_instance() {
    return reinterpret_cast<const ResolveRequest*>(
               &_ResolveRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ResolveRequest& a, ResolveRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ResolveRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResolveRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ResolveRequest* New() const final {
    return CreateMaybeMessage<ResolveRequest>(nullptr);
  }

  ResolveRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResolveRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ResolveRequest& from);
  void MergeFrom(const ResolveRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResolveRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "resolver.ResolveRequest";
  }
  protected:
  explicit ResolveRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_resolver_2eproto);
    return ::descriptor_table_resolver_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddressFieldNumber = 1,
    kNameFieldNumber = 2,
    kAgeFieldNumber = 3,
    kNumberFieldNumber = 4,
  };
  // required string address = 1;
  bool has_address() const;
  private:
  bool _internal_has_address() const;
  public:
  void clear_address();
  const std::string& address() const;
  void set_address(const std::string& value);
  void set_address(std::string&& value);
  void set_address(const char* value);
  void set_address(const char* value, size_t size);
  std::string* mutable_address();
  std::string* release_address();
  void set_allocated_address(std::string* address);
  private:
  const std::string& _internal_address() const;
  void _internal_set_address(const std::string& value);
  std::string* _internal_mutable_address();
  public:

  // required string name = 2;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // required int32 age = 3;
  bool has_age() const;
  private:
  bool _internal_has_age() const;
  public:
  void clear_age();
  ::PROTOBUF_NAMESPACE_ID::int32 age() const;
  void set_age(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_age() const;
  void _internal_set_age(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 number = 4;
  bool has_number() const;
  private:
  bool _internal_has_number() const;
  public:
  void clear_number();
  ::PROTOBUF_NAMESPACE_ID::int32 number() const;
  void set_number(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_number() const;
  void _internal_set_number(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:resolver.ResolveRequest)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::int32 age_;
  ::PROTOBUF_NAMESPACE_ID::int32 number_;
  friend struct ::TableStruct_resolver_2eproto;
};
// -------------------------------------------------------------------

class ResolveResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:resolver.ResolveResponse) */ {
 public:
  inline ResolveResponse() : ResolveResponse(nullptr) {}
  virtual ~ResolveResponse();

  ResolveResponse(const ResolveResponse& from);
  ResolveResponse(ResolveResponse&& from) noexcept
    : ResolveResponse() {
    *this = ::std::move(from);
  }

  inline ResolveResponse& operator=(const ResolveResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResolveResponse& operator=(ResolveResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ResolveResponse& default_instance();

  static inline const ResolveResponse* internal_default_instance() {
    return reinterpret_cast<const ResolveResponse*>(
               &_ResolveResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ResolveResponse& a, ResolveResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ResolveResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResolveResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ResolveResponse* New() const final {
    return CreateMaybeMessage<ResolveResponse>(nullptr);
  }

  ResolveResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResolveResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ResolveResponse& from);
  void MergeFrom(const ResolveResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResolveResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "resolver.ResolveResponse";
  }
  protected:
  explicit ResolveResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_resolver_2eproto);
    return ::descriptor_table_resolver_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIpFieldNumber = 2,
    kPortFieldNumber = 3,
    kResolvedFieldNumber = 1,
  };
  // repeated fixed32 ip = 2;
  int ip_size() const;
  private:
  int _internal_ip_size() const;
  public:
  void clear_ip();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ip(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_ip() const;
  void _internal_add_ip(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_ip();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 ip(int index) const;
  void set_ip(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_ip(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      ip() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_ip();

  // repeated int32 port = 3;
  int port_size() const;
  private:
  int _internal_port_size() const;
  public:
  void clear_port();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_port(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_port() const;
  void _internal_add_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_port();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 port(int index) const;
  void set_port(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      port() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_port();

  // optional bool resolved = 1 [default = false];
  bool has_resolved() const;
  private:
  bool _internal_has_resolved() const;
  public:
  void clear_resolved();
  bool resolved() const;
  void set_resolved(bool value);
  private:
  bool _internal_resolved() const;
  void _internal_set_resolved(bool value);
  public:

  // @@protoc_insertion_point(class_scope:resolver.ResolveResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > ip_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > port_;
  bool resolved_;
  friend struct ::TableStruct_resolver_2eproto;
};
// ===================================================================

class ResolverService_Stub;

class ResolverService : public ::PROTOBUF_NAMESPACE_ID::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline ResolverService() {};
 public:
  virtual ~ResolverService();

  typedef ResolverService_Stub Stub;

  static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* descriptor();

  virtual void Resolve(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::resolver::ResolveRequest* request,
                       ::resolver::ResolveResponse* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                  ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                  const ::PROTOBUF_NAMESPACE_ID::Message* request,
                  ::PROTOBUF_NAMESPACE_ID::Message* response,
                  ::google::protobuf::Closure* done);
  const ::PROTOBUF_NAMESPACE_ID::Message& GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;
  const ::PROTOBUF_NAMESPACE_ID::Message& GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(ResolverService);
};

class ResolverService_Stub : public ResolverService {
 public:
  ResolverService_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel);
  ResolverService_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
                   ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership);
  ~ResolverService_Stub();

  inline ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel() { return channel_; }

  // implements ResolverService ------------------------------------------

  void Resolve(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::resolver::ResolveRequest* request,
                       ::resolver::ResolveResponse* response,
                       ::google::protobuf::Closure* done);
 private:
  ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(ResolverService_Stub);
};


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ResolveRequest

// required string address = 1;
inline bool ResolveRequest::_internal_has_address() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ResolveRequest::has_address() const {
  return _internal_has_address();
}
inline void ResolveRequest::clear_address() {
  address_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ResolveRequest::address() const {
  // @@protoc_insertion_point(field_get:resolver.ResolveRequest.address)
  return _internal_address();
}
inline void ResolveRequest::set_address(const std::string& value) {
  _internal_set_address(value);
  // @@protoc_insertion_point(field_set:resolver.ResolveRequest.address)
}
inline std::string* ResolveRequest::mutable_address() {
  // @@protoc_insertion_point(field_mutable:resolver.ResolveRequest.address)
  return _internal_mutable_address();
}
inline const std::string& ResolveRequest::_internal_address() const {
  return address_.Get();
}
inline void ResolveRequest::_internal_set_address(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ResolveRequest::set_address(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  address_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:resolver.ResolveRequest.address)
}
inline void ResolveRequest::set_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:resolver.ResolveRequest.address)
}
inline void ResolveRequest::set_address(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:resolver.ResolveRequest.address)
}
inline std::string* ResolveRequest::_internal_mutable_address() {
  _has_bits_[0] |= 0x00000001u;
  return address_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ResolveRequest::release_address() {
  // @@protoc_insertion_point(field_release:resolver.ResolveRequest.address)
  if (!_internal_has_address()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return address_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ResolveRequest::set_allocated_address(std::string* address) {
  if (address != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), address,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:resolver.ResolveRequest.address)
}

// required string name = 2;
inline bool ResolveRequest::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ResolveRequest::has_name() const {
  return _internal_has_name();
}
inline void ResolveRequest::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ResolveRequest::name() const {
  // @@protoc_insertion_point(field_get:resolver.ResolveRequest.name)
  return _internal_name();
}
inline void ResolveRequest::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:resolver.ResolveRequest.name)
}
inline std::string* ResolveRequest::mutable_name() {
  // @@protoc_insertion_point(field_mutable:resolver.ResolveRequest.name)
  return _internal_mutable_name();
}
inline const std::string& ResolveRequest::_internal_name() const {
  return name_.Get();
}
inline void ResolveRequest::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ResolveRequest::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:resolver.ResolveRequest.name)
}
inline void ResolveRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:resolver.ResolveRequest.name)
}
inline void ResolveRequest::set_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:resolver.ResolveRequest.name)
}
inline std::string* ResolveRequest::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000002u;
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ResolveRequest::release_name() {
  // @@protoc_insertion_point(field_release:resolver.ResolveRequest.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ResolveRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:resolver.ResolveRequest.name)
}

// required int32 age = 3;
inline bool ResolveRequest::_internal_has_age() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ResolveRequest::has_age() const {
  return _internal_has_age();
}
inline void ResolveRequest::clear_age() {
  age_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ResolveRequest::_internal_age() const {
  return age_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ResolveRequest::age() const {
  // @@protoc_insertion_point(field_get:resolver.ResolveRequest.age)
  return _internal_age();
}
inline void ResolveRequest::_internal_set_age(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  age_ = value;
}
inline void ResolveRequest::set_age(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_age(value);
  // @@protoc_insertion_point(field_set:resolver.ResolveRequest.age)
}

// required int32 number = 4;
inline bool ResolveRequest::_internal_has_number() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ResolveRequest::has_number() const {
  return _internal_has_number();
}
inline void ResolveRequest::clear_number() {
  number_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ResolveRequest::_internal_number() const {
  return number_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ResolveRequest::number() const {
  // @@protoc_insertion_point(field_get:resolver.ResolveRequest.number)
  return _internal_number();
}
inline void ResolveRequest::_internal_set_number(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  number_ = value;
}
inline void ResolveRequest::set_number(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_number(value);
  // @@protoc_insertion_point(field_set:resolver.ResolveRequest.number)
}

// -------------------------------------------------------------------

// ResolveResponse

// optional bool resolved = 1 [default = false];
inline bool ResolveResponse::_internal_has_resolved() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ResolveResponse::has_resolved() const {
  return _internal_has_resolved();
}
inline void ResolveResponse::clear_resolved() {
  resolved_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool ResolveResponse::_internal_resolved() const {
  return resolved_;
}
inline bool ResolveResponse::resolved() const {
  // @@protoc_insertion_point(field_get:resolver.ResolveResponse.resolved)
  return _internal_resolved();
}
inline void ResolveResponse::_internal_set_resolved(bool value) {
  _has_bits_[0] |= 0x00000001u;
  resolved_ = value;
}
inline void ResolveResponse::set_resolved(bool value) {
  _internal_set_resolved(value);
  // @@protoc_insertion_point(field_set:resolver.ResolveResponse.resolved)
}

// repeated fixed32 ip = 2;
inline int ResolveResponse::_internal_ip_size() const {
  return ip_.size();
}
inline int ResolveResponse::ip_size() const {
  return _internal_ip_size();
}
inline void ResolveResponse::clear_ip() {
  ip_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ResolveResponse::_internal_ip(int index) const {
  return ip_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ResolveResponse::ip(int index) const {
  // @@protoc_insertion_point(field_get:resolver.ResolveResponse.ip)
  return _internal_ip(index);
}
inline void ResolveResponse::set_ip(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  ip_.Set(index, value);
  // @@protoc_insertion_point(field_set:resolver.ResolveResponse.ip)
}
inline void ResolveResponse::_internal_add_ip(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  ip_.Add(value);
}
inline void ResolveResponse::add_ip(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_ip(value);
  // @@protoc_insertion_point(field_add:resolver.ResolveResponse.ip)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
ResolveResponse::_internal_ip() const {
  return ip_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
ResolveResponse::ip() const {
  // @@protoc_insertion_point(field_list:resolver.ResolveResponse.ip)
  return _internal_ip();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
ResolveResponse::_internal_mutable_ip() {
  return &ip_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
ResolveResponse::mutable_ip() {
  // @@protoc_insertion_point(field_mutable_list:resolver.ResolveResponse.ip)
  return _internal_mutable_ip();
}

// repeated int32 port = 3;
inline int ResolveResponse::_internal_port_size() const {
  return port_.size();
}
inline int ResolveResponse::port_size() const {
  return _internal_port_size();
}
inline void ResolveResponse::clear_port() {
  port_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ResolveResponse::_internal_port(int index) const {
  return port_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ResolveResponse::port(int index) const {
  // @@protoc_insertion_point(field_get:resolver.ResolveResponse.port)
  return _internal_port(index);
}
inline void ResolveResponse::set_port(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  port_.Set(index, value);
  // @@protoc_insertion_point(field_set:resolver.ResolveResponse.port)
}
inline void ResolveResponse::_internal_add_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  port_.Add(value);
}
inline void ResolveResponse::add_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_port(value);
  // @@protoc_insertion_point(field_add:resolver.ResolveResponse.port)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
ResolveResponse::_internal_port() const {
  return port_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
ResolveResponse::port() const {
  // @@protoc_insertion_point(field_list:resolver.ResolveResponse.port)
  return _internal_port();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
ResolveResponse::_internal_mutable_port() {
  return &port_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
ResolveResponse::mutable_port() {
  // @@protoc_insertion_point(field_mutable_list:resolver.ResolveResponse.port)
  return _internal_mutable_port();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace resolver

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_resolver_2eproto
