/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef Twitter_H
#define Twitter_H

#include <thrift/transport/TBufferTransports.h>
#include <thrift/cxxfunctional.h>
namespace apache { namespace thrift { namespace async {
class TAsyncChannel;
}}}
#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TAsyncDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "test_types.h"

namespace thrift { namespace example {

#ifdef _WIN32
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class TwitterIf {
 public:
  virtual ~TwitterIf() {}
  virtual void sendString(std::string& _return, const std::string& data) = 0;
};

class TwitterIfFactory {
 public:
  typedef TwitterIf Handler;

  virtual ~TwitterIfFactory() {}

  virtual TwitterIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(TwitterIf* /* handler */) = 0;
};

class TwitterIfSingletonFactory : virtual public TwitterIfFactory {
 public:
  TwitterIfSingletonFactory(const boost::shared_ptr<TwitterIf>& iface) : iface_(iface) {}
  virtual ~TwitterIfSingletonFactory() {}

  virtual TwitterIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(TwitterIf* /* handler */) {}

 protected:
  boost::shared_ptr<TwitterIf> iface_;
};

class TwitterNull : virtual public TwitterIf {
 public:
  virtual ~TwitterNull() {}
  void sendString(std::string& /* _return */, const std::string& /* data */) {
    return;
  }
};

typedef struct _Twitter_sendString_args__isset {
  _Twitter_sendString_args__isset() : data(false) {}
  bool data :1;
} _Twitter_sendString_args__isset;

class Twitter_sendString_args {
 public:

  Twitter_sendString_args(const Twitter_sendString_args&);
  Twitter_sendString_args& operator=(const Twitter_sendString_args&);
  Twitter_sendString_args() : data() {
  }

  virtual ~Twitter_sendString_args() throw();
  std::string data;

  _Twitter_sendString_args__isset __isset;

  void __set_data(const std::string& val);

  bool operator == (const Twitter_sendString_args & rhs) const
  {
    if (!(data == rhs.data))
      return false;
    return true;
  }
  bool operator != (const Twitter_sendString_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Twitter_sendString_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Twitter_sendString_pargs {
 public:


  virtual ~Twitter_sendString_pargs() throw();
  const std::string* data;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Twitter_sendString_result__isset {
  _Twitter_sendString_result__isset() : success(false) {}
  bool success :1;
} _Twitter_sendString_result__isset;

class Twitter_sendString_result {
 public:

  Twitter_sendString_result(const Twitter_sendString_result&);
  Twitter_sendString_result& operator=(const Twitter_sendString_result&);
  Twitter_sendString_result() : success() {
  }

  virtual ~Twitter_sendString_result() throw();
  std::string success;

  _Twitter_sendString_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const Twitter_sendString_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Twitter_sendString_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Twitter_sendString_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Twitter_sendString_presult__isset {
  _Twitter_sendString_presult__isset() : success(false) {}
  bool success :1;
} _Twitter_sendString_presult__isset;

class Twitter_sendString_presult {
 public:


  virtual ~Twitter_sendString_presult() throw();
  std::string* success;

  _Twitter_sendString_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

class TwitterClient : virtual public TwitterIf {
 public:
  TwitterClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  TwitterClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void sendString(std::string& _return, const std::string& data);
  void send_sendString(const std::string& data);
  void recv_sendString(std::string& _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class TwitterProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<TwitterIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (TwitterProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_sendString(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  TwitterProcessor(boost::shared_ptr<TwitterIf> iface) :
    iface_(iface) {
    processMap_["sendString"] = &TwitterProcessor::process_sendString;
  }

  virtual ~TwitterProcessor() {}
};

class TwitterProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  TwitterProcessorFactory(const ::boost::shared_ptr< TwitterIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< TwitterIfFactory > handlerFactory_;
};

class TwitterMultiface : virtual public TwitterIf {
 public:
  TwitterMultiface(std::vector<boost::shared_ptr<TwitterIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~TwitterMultiface() {}
 protected:
  std::vector<boost::shared_ptr<TwitterIf> > ifaces_;
  TwitterMultiface() {}
  void add(boost::shared_ptr<TwitterIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void sendString(std::string& _return, const std::string& data) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sendString(_return, data);
    }
    ifaces_[i]->sendString(_return, data);
    return;
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class TwitterConcurrentClient : virtual public TwitterIf {
 public:
  TwitterConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  TwitterConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void sendString(std::string& _return, const std::string& data);
  int32_t send_sendString(const std::string& data);
  void recv_sendString(std::string& _return, const int32_t seqid);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

class TwitterCobClient;

class TwitterCobClIf {
 public:
  virtual ~TwitterCobClIf() {}
  virtual void sendString(tcxx::function<void(TwitterCobClient* client)> cob, const std::string& data) = 0;
};

class TwitterCobSvIf {
 public:
  virtual ~TwitterCobSvIf() {}
  virtual void sendString(tcxx::function<void(std::string const& _return)> cob, const std::string& data) = 0;
};

class TwitterCobSvIfFactory {
 public:
  typedef TwitterCobSvIf Handler;

  virtual ~TwitterCobSvIfFactory() {}

  virtual TwitterCobSvIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(TwitterCobSvIf* /* handler */) = 0;
};

class TwitterCobSvIfSingletonFactory : virtual public TwitterCobSvIfFactory {
 public:
  TwitterCobSvIfSingletonFactory(const boost::shared_ptr<TwitterCobSvIf>& iface) : iface_(iface) {}
  virtual ~TwitterCobSvIfSingletonFactory() {}

  virtual TwitterCobSvIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(TwitterCobSvIf* /* handler */) {}

 protected:
  boost::shared_ptr<TwitterCobSvIf> iface_;
};

class TwitterCobSvNull : virtual public TwitterCobSvIf {
 public:
  virtual ~TwitterCobSvNull() {}
  void sendString(tcxx::function<void(std::string const& _return)> cob, const std::string& /* data */) {
    std::string _return;
    return cob(_return);
  }
};

class TwitterCobClient : virtual public TwitterCobClIf {
 public:
  TwitterCobClient(boost::shared_ptr< ::apache::thrift::async::TAsyncChannel> channel, ::apache::thrift::protocol::TProtocolFactory* protocolFactory) :
    channel_(channel),
    itrans_(new ::apache::thrift::transport::TMemoryBuffer()),
    otrans_(new ::apache::thrift::transport::TMemoryBuffer()),
    piprot_(protocolFactory->getProtocol(itrans_)),
    poprot_(protocolFactory->getProtocol(otrans_)) {
    iprot_ = piprot_.get();
    oprot_ = poprot_.get();
  }
  boost::shared_ptr< ::apache::thrift::async::TAsyncChannel> getChannel() {
    return channel_;
  }
  virtual void completed__(bool /* success */) {}
  void sendString(tcxx::function<void(TwitterCobClient* client)> cob, const std::string& data);
  void send_sendString(const std::string& data);
  void recv_sendString(std::string& _return);
 protected:
  boost::shared_ptr< ::apache::thrift::async::TAsyncChannel> channel_;
  boost::shared_ptr< ::apache::thrift::transport::TMemoryBuffer> itrans_;
  boost::shared_ptr< ::apache::thrift::transport::TMemoryBuffer> otrans_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class TwitterAsyncProcessor : public ::apache::thrift::async::TAsyncDispatchProcessor {
 protected:
  boost::shared_ptr<TwitterCobSvIf> iface_;
  virtual void dispatchCall(tcxx::function<void(bool ok)> cob, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid);
 private:
  typedef  void (TwitterAsyncProcessor::*ProcessFunction)(tcxx::function<void(bool ok)>, int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_sendString(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_sendString(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const std::string& _return);
  void throw_sendString(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
 public:
  TwitterAsyncProcessor(boost::shared_ptr<TwitterCobSvIf> iface) :
    iface_(iface) {
    processMap_["sendString"] = &TwitterAsyncProcessor::process_sendString;
  }

  virtual ~TwitterAsyncProcessor() {}
};

class TwitterAsyncProcessorFactory : public ::apache::thrift::async::TAsyncProcessorFactory {
 public:
  TwitterAsyncProcessorFactory(const ::boost::shared_ptr< TwitterCobSvIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::async::TAsyncProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< TwitterCobSvIfFactory > handlerFactory_;
};

#ifdef _WIN32
  #pragma warning( pop )
#endif

}} // namespace

#endif
