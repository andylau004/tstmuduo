/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "echo_types.h"

namespace echo {

int _kTweetTypeValues[] = {
  TweetType::TWEET,
  TweetType::RETWEET,
  TweetType::DM,
  TweetType::REPLY
};
const char* _kTweetTypeNames[] = {
  "TWEET",
  "RETWEET",
  "DM",
  "REPLY"
};
const std::map<int, const char*> _TweetType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(4, _kTweetTypeValues, _kTweetTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

const char* test::ascii_fingerprint = "BE83BDAD1197A19ED21F973CAC2DABDF";
const uint8_t test::binary_fingerprint[16] = {0xBE,0x83,0xBD,0xAD,0x11,0x97,0xA1,0x9E,0xD2,0x1F,0x97,0x3C,0xAC,0x2D,0xAB,0xDF};

uint32_t test::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_arg = false;
  bool isset_arg2 = false;
  bool isset_arg3 = false;
  bool isset_arg4 = false;
  bool isset_arg5 = false;
  bool isset_arg6 = false;
  bool isset_arg7 = false;
  bool isset_arg8 = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->arg);
          isset_arg = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->arg2);
          isset_arg2 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->arg3.clear();
            uint32_t _size0;
            ::apache::thrift::protocol::TType _etype3;
            iprot->readListBegin(_etype3, _size0);
            this->arg3.resize(_size0);
            uint32_t _i4;
            for (_i4 = 0; _i4 < _size0; ++_i4)
            {
              xfer += iprot->readString(this->arg3[_i4]);
            }
            iprot->readListEnd();
          }
          isset_arg3 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->arg4.clear();
            uint32_t _size5;
            ::apache::thrift::protocol::TType _ktype6;
            ::apache::thrift::protocol::TType _vtype7;
            iprot->readMapBegin(_ktype6, _vtype7, _size5);
            uint32_t _i9;
            for (_i9 = 0; _i9 < _size5; ++_i9)
            {
              std::string _key10;
              xfer += iprot->readString(_key10);
              std::string& _val11 = this->arg4[_key10];
              xfer += iprot->readString(_val11);
            }
            iprot->readMapEnd();
          }
          isset_arg4 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->arg5);
          isset_arg5 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_SET) {
          {
            this->arg6.clear();
            uint32_t _size12;
            ::apache::thrift::protocol::TType _etype15;
            iprot->readSetBegin(_etype15, _size12);
            uint32_t _i16;
            for (_i16 = 0; _i16 < _size12; ++_i16)
            {
              int64_t _elem17;
              xfer += iprot->readI64(_elem17);
              this->arg6.insert(_elem17);
            }
            iprot->readSetEnd();
          }
          isset_arg6 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->arg7);
          isset_arg7 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast18;
          xfer += iprot->readI32(ecast18);
          this->arg8 = (TweetType::type)ecast18;
          isset_arg8 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_arg)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_arg2)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_arg3)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_arg4)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_arg5)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_arg6)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_arg7)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_arg8)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t test::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("test");
  xfer += oprot->writeFieldBegin("arg", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->arg);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("arg2", ::apache::thrift::protocol::T_DOUBLE, 2);
  xfer += oprot->writeDouble(this->arg2);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("arg3", ::apache::thrift::protocol::T_LIST, 3);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->arg3.size()));
    std::vector<std::string> ::const_iterator _iter19;
    for (_iter19 = this->arg3.begin(); _iter19 != this->arg3.end(); ++_iter19)
    {
      xfer += oprot->writeString((*_iter19));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("arg4", ::apache::thrift::protocol::T_MAP, 4);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->arg4.size()));
    std::map<std::string, std::string> ::const_iterator _iter20;
    for (_iter20 = this->arg4.begin(); _iter20 != this->arg4.end(); ++_iter20)
    {
      xfer += oprot->writeString(_iter20->first);
      xfer += oprot->writeString(_iter20->second);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("arg5", ::apache::thrift::protocol::T_BOOL, 5);
  xfer += oprot->writeBool(this->arg5);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("arg6", ::apache::thrift::protocol::T_SET, 6);
  {
    xfer += oprot->writeSetBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>(this->arg6.size()));
    std::set<int64_t> ::const_iterator _iter21;
    for (_iter21 = this->arg6.begin(); _iter21 != this->arg6.end(); ++_iter21)
    {
      xfer += oprot->writeI64((*_iter21));
    }
    xfer += oprot->writeSetEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("arg7", ::apache::thrift::protocol::T_I32, 7);
  xfer += oprot->writeI32(this->arg7);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("arg8", ::apache::thrift::protocol::T_I32, 8);
  xfer += oprot->writeI32((int32_t)this->arg8);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

} // namespace
