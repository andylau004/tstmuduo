// This autogenerated skeleton file illustrates one way to adapt a synchronous
// interface into an asynchronous interface. You should copy it to another
// filename to avoid overwriting it and rewrite as asynchronous any functions
// that would otherwise introduce unwanted latency.

#include "Echo.h"
#include <protocol/TBinaryProtocol.h>
#include <async/TEventServer.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::async;

using boost::shared_ptr;

using namespace  ::echo;

class EchoAsyncHandler : public EchoCobSvIf {
 public:
  EchoAsyncHandler() {
    syncHandler_ = std::auto_ptr<EchoHandler>(new EchoHandler);
    // Your initialization goes here
  }
  virtual ~EchoAsyncHandler();

  void echo(std::tr1::function<void(std::string const& _return)> cob, const std::string& arg, const test& arg2) {
    std::string _return = "";
    syncHandler_->echo(_return, arg, arg2);
    return cob(_return);
  }

 protected:
  std::auto_ptr<EchoHandler> syncHandler_;
};

